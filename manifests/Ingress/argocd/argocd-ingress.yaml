---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-server-ingress
  namespace: argocd
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    # If you encounter a redirect loop or are getting a 307 response code
    # then you need to force the nginx ingress to connect to the backend using HTTPS.
    #
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
spec:
  ingressClassName: "nginx"
  rules:
  - host: argocd.ogaba.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: argocd-server
            port:
              name: https
  tls:
  - hosts:
    - argocd.ogaba.io
    secretName: argocd-secret # do not change, this is provided by Argo CD
---
apiVersion: v1
kind: Service
metadata:
  name: argocd-server
  namespace: argocd
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 443
    targetPort: https
    name: https
  selector:
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/instance: argocd-server

# apiVersion: v1
# kind: Service
# metadata:
#   name: aks-helloworld-two  
#   namespace: test-deploy
# spec:
#   type: ClusterIP
#   ports:
#   - port: 80
#     targetPort: 80
#     protocol: TCP
#     name: http
#   selector:
#     app: aks-helloworld-two
